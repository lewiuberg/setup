{"config":{"lang":["en"],"separator":"[\\s\\-\\.]","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Setup Documentation","text":"<p>The Setup Documentation is a collection of setup guides, snippets, templates, and other useful information that the Setup team has gathered over the years and found useful.</p> <p>The wish for this project is to have the best step-by-step guides for setting up a computer for development, with different operating systems, languages, and ides.</p> <p>The main focus at this point is macOS with the arm64 architecture, python and C# using Visual Studio Code as the IDE.</p>"},{"location":"installation/","title":"Installation","text":"<p>This section contains guides for installing different tools and applications.</p>"},{"location":"installation/#windows","title":"Windows","text":"<p>We will use Chocolatey as a package manager for Windows. Pyenv-win for switching between Python versions. And Poetry for managing Python packages and virtual environments.</p>"},{"location":"installation/#macos","title":"macOS","text":"<p>We will use Homebrew as a package manager for macOS. Pyenv for switching between Python versions. And Poetry for managing Python packages and virtual environments.</p> <p>Automated setup for macOS arm64</p> <p>There is a set of scripts that will automate the installation for a Mac using the new arm64 architecture. The scripts are located in the automated setup folder.</p>"},{"location":"installation/chocolatey/","title":"Chocolatey","text":"<p>Chocolatey is a machine-level package manager and installer for software packages, like Homebrew for macOS. It is an execution engine using the NuGet packaging infrastructure and Windows PowerShell to provide an automation tool for installing software on Windows machines, designed to simplify the process from the user perspective. The name is an extension on a pun of NuGet (from \"nougat\") \"because everyone loves Chocolatey nougat\".</p>"},{"location":"installation/chocolatey/#install-chocolatey","title":"Install Chocolatey","text":"<p>Installing chocolatey is done by opening a PowerShell window as an administrator and run the following command, which checks if the PowerShell profile exists, if not it creates it. Then it installs Chocolatey and refreshes the environment variables.</p> <pre><code>Set-Location $env:USERPROFILE\nIf ( ! ( Test-Path $PROFILE ) ) { New-Item -Force -ItemType File -Path $PROFILE; Add-Content -Path $PROFILE -Encoding UTF8 -Value \"# Powershell Profile\"; }\nSet-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\nRefreshEnv.cmd\n</code></pre>"},{"location":"installation/chocolatey/#powershell-auto-completion","title":"PowerShell Auto-Completion","text":"<p>Chocolatey provides PowerShell auto-completion for the <code>choco</code> command. To enable it, run the following command in PowerShell:</p> <pre><code>echo \"\n# Chocolatey\n`$ChocolateyProfile = \"\"`$env:ChocolateyInstall\\helpers\\chocolateyProfile.psm1\"\"\nif (Test-Path(`$ChocolateyProfile)) {\n    Import-Module \"\"`$ChocolateyProfile\"\"\n}\n\" | Out-File $PROFILE -Encoding UTF8 -Append\n</code></pre>"},{"location":"installation/pyenv-win/","title":"Pyenv-win","text":"<p>Pyenv-win is a Python version management tool for Windows. It is a port of the popular pyenv tool for Unix-like systems. It allows you to easily switch between multiple versions of Python. It is simple, unobtrusive, and follows the UNIX tradition of single-purpose tools that do one thing well.</p>"},{"location":"installation/pyenv-win/#install-pyenv-win","title":"Install Pyenv-win","text":"<p>To install pyenv-win, open a PowerShell window as an administrator and run the following command:</p> <pre><code>choco install pyenv-win -y\n</code></pre> <p>Add the system environment variables PYENV, PYENV_HOME and PYENV_ROOT to your Environment Variables by running the following commands in PowerShell:</p> <pre><code>[System.Environment]::SetEnvironmentVariable('PYENV',$env:USERPROFILE + \"\\.pyenv\\pyenv-win\\\",\"User\")\n\n[System.Environment]::SetEnvironmentVariable('PYENV_ROOT',$env:USERPROFILE + \"\\.pyenv\\pyenv-win\\\",\"User\")\n\n[System.Environment]::SetEnvironmentVariable('PYENV_HOME',$env:USERPROFILE + \"\\.pyenv\\pyenv-win\\\",\"User\")\n</code></pre> <p>Then add the paths to USER PATH to be able to use the commands. In PowerShell, run the following command:</p> <pre><code>[System.Environment]::SetEnvironmentVariable('path', $env:USERPROFILE + \"\\.pyenv\\pyenv-win\\bin;\" + $env:USERPROFILE + \"\\.pyenv\\pyenv-win\\shims;\" + [System.Environment]::GetEnvironmentVariable('path', \"User\"),\"User\")\n</code></pre> <p>To enable pyenv-win to run scripts in PowerShell, run the following command:</p> <pre><code>Set-ExecutionPolicy RemoteSigned\n</code></pre> <p>If you cant set the Execution Policy by running PowerShell as Administrator, you can set it under the current user scope by running the following command:[^1]</p> <pre><code>Set-ExecutionPolicy RemoteSigned -Scope CurrentUser\n</code></pre>"},{"location":"installation/pyenv/","title":"Pyenv","text":""},{"location":"snippets/","title":"Snippets","text":"<p>some text</p>"},{"location":"temps/","title":"Templates","text":"<p>some text</p>"},{"location":"usage/","title":"Usage","text":"<p>This section contains information about how to use the various tools and programs that were installed in the installation section.</p>"},{"location":"usage/chocolatey/","title":"Chocolatey","text":"<p>After installing Chocolatey, it can be used in PowerShell or Command Prompt. There are a lot of commands available, and can be listed by running the following command:</p> <pre><code>choco list -lo\n</code></pre> Command Description list lists remote or local packages search searches remote or local packages info retrieves package information install installs packages from various sources pin pins a package to suppress upgrades outdated retrieves packages that are outdated upgrade upgrades packages from various sources uninstall uninstalls a package"},{"location":"usage/chocolatey/#examples","title":"Examples","text":"Command Description Find a package <code>choco list</code> List all chocolatey packages <code>choco list --local-only</code> List installed packages <code>choco search zip</code> Search packages mentionning \"zip\" <code>choco search --by-tag compression</code> Search packages by their tags <code>choco search --by-id-only zip</code> Search packages with \"zip\" in the package name <code>choco search --order-by-popularity zip</code> Filter and sort by package results by popularity <code>choco search --approved-only zip</code> Only return approved packages <code>choco info 7zip</code> Get information about 7zip package Install <code>choco install 7zip</code> Install <code>choco install 7zip --install-directory=P:\\7z</code> Install to a specific directory Maintenance <code>choco list --localonly</code> List installed packages <code>choco outdated</code> List upgradable packages <code>choco upgrade all -y</code> Upgrade all packages Pinning <code>choco pin list</code> List pinned packages <code>choco pin add --name 7zip</code> Suppress upgrades for 7zip <code>choco pin remove --name 7zip</code> Supress upgrades supression for 7zip ;) Switches Description <code>--help</code> Prints out the help menu. <code>--install-directory=</code>VALUE Install Directory Override <code>-y</code>, <code>--yes</code> Confirm all prompts. <code>-f</code>, <code>--force</code> Force the behavior. <code>--what-if</code> Don't actually do anything, simulate. <code>--execution-timeout=</code>VALUE The time to allow a command to finish. <code>--fail-on-standard-error</code> Fail on standard error output (stderr). <code>--use-system-powershell</code> Execute PowerShell using an external process. <code>--debug</code> Show debug messaging. <code>--verbose</code> Show verbose messaging. <code>--trace</code> Show trace messaging. <code>--log-file=</code>VALUE Log File to output to in addition to regular loggers. <code>--no-color</code> Do not show colorization in output. <code>--limit-output</code> Limit the output to essential information. <code>--no-progress</code> Do not show download progress percentages. <code>--allow-unofficial-build</code> Allow the use of an unofficial build."},{"location":"usage/chocolatey/#optional-gui","title":"Optional GUI","text":"<p>If you want to use a GUI for Chocolatey, you can install the Chocolatey GUI with the following command:</p> <pre><code>choco install chocolateygui -y\n</code></pre> <p></p>"},{"location":"usage/homebrew/","title":"Homebrew","text":""},{"location":"usage/pyenv-win/","title":"Pyenv-win","text":"<p>To install the Python version you want to use in your project. For example, to install Python 3.10.5, run the following command:</p> <pre><code>pyenv install 3.10.5\n</code></pre> <p>After it is installed navigate to the root of your project and run the following command to set the local Python version:</p> <pre><code>pyenv local 3.10.5\n</code></pre> <p>A file named <code>.python-version</code> will be created in the root of your project. This file contains the Python version that will be used when you run the <code>python</code> command in your project.</p> <p>Now, to test that the desired Python version is being used, run the following command:</p> <pre><code>python --version\n</code></pre> <p>You should see the following output:</p> <pre><code>Python 3.10.5\n</code></pre>"}]}